import com.bmuschko.gradle.docker.tasks.image.Dockerfile

plugins {
    id 'java'
    id 'groovy'
    id 'idea'
    id 'eclipse'
    id 'jacoco'

    id 'org.springframework.boot' version '2.1.5.RELEASE'
    id "io.freefair.lombok" version "3.6.4"
    id 'com.bmuschko.docker-remote-api' version '4.9.0'
}

version = '1.0.0'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        groovy {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir('src/integrationTest/groovy')
        }
        resources.srcDir('src/integrationTest/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.1.5.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.1.5.RELEASE'
    compile group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.4.1'

    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '2.1.5.RELEASE'

    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.1.5.RELEASE'
    testCompile group: 'org.spockframework', name: 'spock-spring', version: '1.3-groovy-2.5'
    testCompile group: 'org.spockframework', name: 'spock-core', version: '1.3-groovy-2.5'

    integrationTestCompile group: 'com.h2database', name: 'h2', version: '1.4.199'
    integrationTestCompile group: 'org.codehaus.groovy.modules.http-builder', name: 'http-builder', version: '0.7.1'
    integrationTestCompile group: 'io.rest-assured', name: 'rest-assured', version: '4.0.0'
}

jacocoTestReport {
    reports {
        html.enabled = true
        html.destination file("${buildDir}/reports/jacocoHtml")
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
    }
    afterEvaluate {
        classDirectories.setFrom(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'com/danielpsf/labs/field/config/**',
                    'com/danielpsf/labs/field/Application**'
            ])
        })
    }
}
test.finalizedBy(jacocoTestReport)

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

task createDockerfile(type: Dockerfile, dependsOn: build) {
    outputs.upToDateWhen { false }
    destFile = file('docker/Dockerfile')

    from('openjdk:11')
    label(['maintainer': 'Daniel Fernandes <danielpsf@gmail.com>'])
    environmentVariable('JAVA_OPTS', '-XX:+UseContainerSupport')

    copyFile("${jar.archiveFileName.get()}", '/home/')
    copyFile("run.sh", '/home/')

    //Simple hack to prevention Windows to mess up with encoding and make the run script unusable
    runCommand("apt-get update && apt-get install dos2unix -y")
    runCommand("dos2unix /home/run.sh")

    defaultCommand('sh', '/home/run.sh', "/home/${jar.archiveFileName.get()}")

    exposePort(8080)

    doLast {
        ant.move(file: jar.archiveFile.get(), tofile: "docker/${jar.archiveFileName.get()}")
        ant.copy(file: 'scripts/run.sh', tofile: 'docker/run.sh')
    }
}

wrapper {
    gradleVersion = '5.4.1'
}
